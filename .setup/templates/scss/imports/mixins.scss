/*
>>================================================================================>
Mixins
>>================================================================================>
*/

/*
 * Mixin: @hidden
 * --------------------------
 * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

@mixin hidden() {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap;
}

/*
 * Mixin: @scrollable
 * --------------------------
 * Applies some styles that make scrollable elements behave a little better
 */

@mixin scrollable() {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar;
}

/*
 * Mixin: @has_modals
 * --------------------------
 * Outputs necessary styles for implementation of modal windows
 */

/*
<section id="" class="modal">
    <div class="window">
        <button class="close-modal close">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                <path d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"/>
            </svg>
        </button>
        <div class="content">
            <p>Test</p>
        </div>
    </div>
</section>
*/

 @mixin has_modals() {

    .modal {

        /*
        All Resolutions
        >>------------->
        */

        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: visibility 300ms ease-in-out, opacity 300ms ease-in-out;
        background-color: rgba(0,0,0,.6);

        @at-root .modal-overflow & {
            @include scrollable();
            
            .window {
                top: 20px;
                transform: translateX(-50%) !important;
                margin-bottom: 20px;
            }
        }

        .window {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            width: calc(100% - 40px);
            max-width: 720px;
            overflow: hidden;
            transition: margin 500ms ease, opacity 300ms ease-in-out, visibility 300ms ease-in-out;
            opacity: 0;
            visibility: hidden;
            margin-top: -50px;
        }

        &.active {
            visibility: visible;
            opacity: 1;

            .window {
                margin: 0;
                transform: translate(-50%,-50%);
                visibility: visible;
                opacity: 1;
            }
        }
        
        .content {
            background-color: rgba(255,255,255,.9);
        }

        .close {
            position: absolute;
            right: 10px;
            top: 10px;
            margin-left: auto;
            width: 45px;
            height: 45px;
            background-color: red;
        }

        /*
        Desktop
        >>------------->
        */

        @media screen and (min-width: $breakpoint_desktop) {
            .content {
               padding: 60px 30px 30px 30px;
            }
        }

        /*
        Mobile
        >>------------->
        */

        @media screen and (max-width: $breakpoint_mobile) {
            .content {
                padding: 60px 20px 20px 20px;
            }
        }
    }
}

/*
 * Mixin: @has_columns
 * --------------------------
 * Creates columns within selected parent elements
 * $count           : Number of columns
 * $gutter          : Gutter size
 * $wrap            : Wrap flex items (T/F)
 * $show_mobile     : Mobile resolutions (T/F)
 */

 @mixin has_columns($count, $gutter, $wrap, $show_mobile) {

    @if $show_mobile == false {
        
        /*
        Desktop
        >>------------->
        */

        @media screen and (min-width: $breakpoint_desktop) {
            display: flex;
            justify-content: flex-start;

            @if $wrap not false {
                flex-wrap: wrap;
            }

            margin-left: (-($gutter / 2));
            margin-right: (-($gutter / 2));

            > * {
                margin-left: ($gutter / 2);
                margin-right: ($gutter / 2);
                width: calc(#{100 / $count}% - #{($gutter)});

                &:nth-child(n + #{($count + 1)}) {
                    margin-top: $gutter;
                }
            }
        }

        @media screen and (max-width: 1023px) and (min-width: $breakpoint_desktop) {
            @if $wrap not false {
                @if $count > 3 {
                    > * {
                        width: calc(#{100 / $count}% - #{($gutter)});
        
                        &:nth-child(n + #{($count + 1)}) {
                            margin-top: $gutter;
                        }
                    }
                }
            }
        }

        /*
        Mobile
        >>------------->
        */

        @media screen and (max-width: $breakpoint_mobile) {
            > *:not(:last-child) {
                margin-bottom: $padding_mobile;
            }
        }
        
    } @else {
        display: flex;
        justify-content: flex-start;

        @if $wrap not false {
            flex-wrap: wrap;
        }

        margin-left: (-($gutter / 2));
        margin-right: (-($gutter / 2));

        > * {
            margin-left: ($gutter / 2);
            margin-right: ($gutter / 2);
            width: calc(#{100 / $count}% - #{($gutter)});

            &:nth-child(n + #{($count + 1)}) {
                margin-top: $gutter;
            }
        }
    }
}

/*
 * Mixin: @has_accordions
 * --------------------------
 * Creates accordion GUI
 */

/*
<div class="accordion">
    <div class="accordion-trigger">
        <h3 class="heading-3">Heading</h3>
    </div>
    <div class="accordion-content">
        <div>
            <p>Content</p>
        </div>
    </div>
</div>
*/

@mixin has_accordions() {
    .accordion {
        .accordion-trigger {
            cursor: pointer;
        }

        .accordion-content {
            height: 0;
            overflow: hidden;

            &.expanded {
                height: auto !important;
            }
        }
    }
}